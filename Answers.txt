1.Identify all the possible test scenarios for the booking but automate
only few priority scenarioâ€™s (possible for you in 2- 3 hours) which are critical to
be passed so that the software product can be deployed to the production.

Test case creation:
The core part of testing any form field is error entry validation, as there are many form fields on UI
we can have test cases based on negative entry with various selection criteria( 
for e.g 
-> departure city should not be displayed
inside destination city dropdown after selection of departure city.
->Check whether the flight details selected by the user is actually displayed in the next page.
->Check whether the cost of travel selected by the user is actually displayed in the next page.
->Check whether the Expiry date of the card used is expired.
->Check whether the card number is a valid one and a validation with respect to number of digits.
->Check whether the user entries does not contain any special characters for fields like name.

This will cover the edge cases of validation.

Mandatory Field Coverage:
The card type, card number fields are mandatory to book a flight, we can have a testcase to check whether the 
user is able to book a flight without entering these mandatory fields.

Test Coverage:
The values which are displayed on the confirmation page can be validated which
include the amount, card number, expiration and Date of payment.

2.If this test was part of a much larger test set, how to speed it up and improve the Script health?

->Avoiding code redundancy is so important to improve the scalability of any automation code.
->Reusing the no of steps in Cucumber across webpages will give the automation tester a clarity of thought.
->Storing the xpaths using object repository such as page object model will enable the automation tester
to frame and store the xpaths accordingly.
->Limited and accurate usage of implicit and explicit waits.
->clearing cache whenever a webdriver is loaded.
->Including basic methods in a single class file and inheriting the methods across repository will reduce
the amount of automation code.
->Using appropriate wait time to allow the page to fully load can avoid such failures of automation scripts.
Its a good practise to add explicit wait to confirm the page load 
with accurate wait time whereever it is required.
We can also use javascript executor to know whether the page is fully loaded
using document.getReadyState method.